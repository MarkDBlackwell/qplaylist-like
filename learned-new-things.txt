  Learned new things:
Use Browser module for Elm cycle.
When importing, don't use "exposing." Always use qualified names and qualify the references; e.g., Html.div.
Import using "as." E.g., import Html.Attributes as A, then: A.src.
Design to avoid Maybe types, if possible.
Type alias of a record includes a constructor.
Each custom type variant includes a constructor.
Keep more code in a single big file.
Use custom types for state-space.
Custom types might somehow include pattern matching.
The constrained type variables are:
  number, appendable, comparable and compappend. See:
  https://guide.elm-lang.org/types/reading_types

See:
https://betterprogramming.pub/elm-a-beautiful-language-for-web-development-bc06fd0b570f?gi=2418dd03a463
https://dev.to/jjant/a-guide-to-native-code-and-effect-managers-in-elm-part-1-commands-1k6n
https://discourse.elm-lang.org/t/escaping-from-npm/7597
https://discourse.elm-lang.org/t/when-is-subscriptions-called/1524/3
https://elm-lang.org/docs/syntax
https://elm-lang.org/examples/clock
https://elm-radio.com/episode/json-decoders/
https://elmprogramming.com/
https://elmprogramming.com/decoding-json-part-1.html
https://elmprogramming.com/decoding-json-part-2.html
https://github.com/izdi/elm-cheat-sheet
https://harfangk.github.io/2018/01/27/elm-function-operators.html
https://kindsonthegenius.com/elm/elm-working-with-button-and-textboxes/
https://korban.net/elm/json2elm/
https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest/
https://package.elm-lang.org/packages/the-sett/elm-pointer/latest/
https://stackoverflow.com/questions/38732946/does-elm-have-a-debugging-function-that-can-print-an-object-to-the-console/54260966#54260966
https://thoughtbot.com/blog/decoding-json-structures-with-elm
https://www.toptal.com/front-end/getting-started-elm-language
